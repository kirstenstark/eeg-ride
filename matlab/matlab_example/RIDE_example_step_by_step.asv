%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 The RIDE Pipeline-step by step                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% for instructions, see manual '#Allgemein\Manuale\EEG_Sprachartefakt_Korrektur\manual\Manual_RIDE_pipeline.docx' 

% This script is used for the preparation of single-trial EEG data, after RIDE correction (pre-processing in BVA) 
% the EEG data will be sorted in a specific order, which can be used to concatenate it with the log file 
% it will generate a folder named 'export_R' for later analysis (e.g., LMM in R)

% data preparation
% Before you start: this script will access 9 different subfolders in your experiments RIDE folder: 
%"raw_eeg", "raw", "mat", "BVAinfo", "output", "single_trials", "single_trials_small", "log", "log_c", "final_log" and "export_R". Please create them now. 

%NEW folders:
% raw_eeg: raw data before BVA has to be saved here; will be used to extract the trigger information if RT is used to match the data (EEG + log).
% raw: MAT-files created by the export function in BVA have to be saved here (see former RIDE script). Matlab does not write here. 
% mat: matlab created (imported) data files (during RIDE), including e.g. reaction times % read from your voice triggers. 
% output: matlab created: results from the actual RIDE calculations. 
% BVAinfo: matlab created: the information from EEG data after BVA, which can be used for check with log file.
% single_trials: matlab created: single trial EEG data after RIDE correction, and the data with interested time window.
% single_trials_small: make the data set samll
% log: this folder is the original log files
% log_c: matlab created: this folder is the log files with .mat format, it only reads numerial data from log file
% final_log: matlab created: this has the log information matched with eeg data
% export_R: matlab created: this has the information of interested timewindow and the text file generated from these files

%% Steps before RIDE_call

clear all;
% add toolbox used in this script
addpath(genpath('N:\Software\Matlab_toolboxen\eeglab13_5_4b'));
addpath(genpath('N:\matlab\'));%'N:\Software\Matlab_toolboxen\RIDE_call'));

% add working folder for this project
addpath(genpath('C:\Users\neuro-lab\Documents\Research projects\eeg-ride\matlab\matlab_example\'));

% Basic Path of your experiments RIDE folder (this folder contains your raw, mat and output folders): former RIDE script (Guang)
% define folders for the processed data 
ridefolder = 'C:\Users\neuro-lab\Documents\Research projects\eeg-ride\matlab\matlab_example\';

twd = [-100,1200]; %the time window for the epoched data
        % NOTE: if segmenated epoch is too long and covers triggers from the next trial, make sure
        % to run the 'segmentation' in BVA again to make it ONLY covers two triggers! [Pei, May2020]
         
sub = {'Vp0001'};

% Your condition names - Bedingungsnamen wie sie im filename enthalten sind
con = {'rep1_close','rep1_distant','rep1_het',...
       'rep2_close','rep2_distant','rep2_het', ...
       'rep3_close','rep3_distant','rep3_het', ...
       'rep4_close','rep4_distant','rep4_het', ...
       'rep5_close','rep5_distant','rep5_het'};
        % NOTE: it is crucial that the sum of these data cover *exactly*
        % the trial numbers of your experiment. See "1-1_Manual". [Pei, July 2020]

% Voicekeytrigger 
voice_tr = 'S  4';

% condition trigger, which has been used for segmentation in BVA
contr = {'S201','S202','S203'};

% sampling rate
srate = 500;

% Output directory
output_dir = fullfile(ridefolder, 'output');

%% RIDE call for one subject and one condition
% RIDE 
for j = 1:1%length(sub)
    disp(j);
    
    for k = 1:1%length(con)
  load([ridefolder,'mat\',sub{j},'_',con{k},'.mat'],'data','rt');    % Path definitions correct?
        cfg = [];
     % Abtastrate ist 500Hz, daher 2, da alle 2ms aufgenommen wird
        cfg.samp_interval = 2;
     % Segmentlänge (geht z.B. bis 2000ms aber der letzte Punkt der aufgenommen wird ist 1998 (2000 - 2)
        cfg.epoch_twd = [-100,1198];
     % nicht ändern
        cfg.comp.name = {'s','r'}; %'c': based on visual inspection (Usually a component is identified by a big and wide hump in the late time window )
     % response trigger
        cfg.comp.twd = {[0,600],[-300,300]}; % rt set according to RIDE_implementtation.pptx p.15
            % time window parameters (for s und r component) have to be adapted to experiment, 
            % e.g., PWI, compounds (ANTJE): [0, 550], [-250,1000] / AK: 0:800; -600:1000
            % BSD: (17 June 2020) [0,800],[-600,1000]
     % cfg.comp.latency = {0,'unknown'}; for c component
        cfg.comp.latency = {zeros(size(data,3),1),rt}; % BSD:(17 June 2020) {0,rt}
       %  cfg = RIDE_cfg(cfg); %% !! see below
      %   results = RIDE_call(data,cfg); %% !! see below
     %    save([ridefolder,'output\results_',sub{j},'_',con{k},'.mat'],'results');    % output folder %% !! See below
    end
end
 % clear output_dir j k 

    %% RIDE_cfg step by step
%cfg = RIDE_cfg(cfg);
%function cfg = RIDE_cfg(cfg)
if ~isfield(cfg,'ave_refer') 
    cfg.ave_refer = 0;%average reference, default: no
end
if ~isfield(cfg,'re_samp') 
    cfg.re_samp = cfg.samp_interval;%re-sampling, default: no
end
if ~isfield(cfg,'high_cutoff') 
    cfg.high_cutoff = 4;%high cutoff for cross-correlation curve, default: 5
end
if ~isfield(cfg,'bd') 
    cfg.bd = 0.2;%alpha value for tukey window,also bd/2 is the length of edge for detrending
end
if ~isfield(cfg,'bl') 
    cfg.bl = 200;%baseline time window
end
if ~isfield(cfg,'rwd') 
    cfg.rwd = 200;%minimal left boundary of R time window
end
cfg.comp_num = length(cfg.comp.name);
if ~isfield(cfg,'xc')
    cfg.xc = 'coeff';%cross-covariance
end
if isfield(cfg,'template')
    if ~isfield(cfg.template,'method')
        cfg.template.method = 'woody';
    end
end
if ~isfield(cfg,'latency_search') 
    cfg.latency_search = 'most_prob';%average reference, default: no
end

if ~isfield(cfg,'prg') 
    cfg.prg = 1;%show progress
end

%% RIDE_call step by step
% results = RIDE_call(data,cfg);

    
    